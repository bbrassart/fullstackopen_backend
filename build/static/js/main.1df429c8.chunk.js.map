{"version":3,"sources":["components/Filter.js","components/Persons.js","components/PersonForm.js","components/Notiifcation.js","helpers/personsHelper.js","App.js","index.js"],"names":["Filter","searchTerm","handleSearchTermChange","value","onChange","Persons","persons","handlePersonDeletion","map","person","key","name","number","onClick","id","window","confirm","deletePerson","renderContacts","PersonForm","addContact","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Notification","message","status","className","baseUrl","App","useEffect","axios","get","then","resp","data","setPersons","useState","setNewName","setSearchTerm","setNewNumber","setMessage","resetUserInputs","notifyUser","setTimeout","filteredContacts","filter","contact","toLowerCase","includes","Object","keys","length","event","target","preventDefault","existingPerson","find","newPerson","put","updatePerson","response","catch","personObject","post","concat","error","console","log","delete","peopleList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1df429c8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({searchTerm, handleSearchTermChange}) => {\n  return (\n    <div>\n      filter shown with:\n      <input\n        value={searchTerm}\n        onChange={handleSearchTermChange}>\n      </input>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst Persons = ({persons, handlePersonDeletion}) => {\n  const deletePerson = ({name, id}) => {\n    if(window.confirm(`Delete ${name} ?`)) {\n      handlePersonDeletion({name, id});\n    }\n  };\n\n  const renderContacts = persons => {\n    return persons.map(person => {\n      return (\n        <li key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person)}>\n            Delete\n          </button>\n        </li>\n      );\n    });\n  };\n\n  return (\n    <ul>\n      { renderContacts(persons) }\n    </ul>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst PersonForm = ({addContact, newName, handleNameChange, newNumber, handleNumberChange}) => {\n  return (\n    <form onSubmit={addContact}>\n      <div>\n        name:\n        <input\n          value={newName}\n          onChange={handleNameChange}\n        />\n      </div>\n      <div>number:\n        <input\n          value={newNumber}\n          onChange={handleNumberChange}\n        />\n      </div>\n      <button type=\"submit\">add</button>\n    </form>\n  );\n};\n\nexport default PersonForm;\n\n\n\n","import React from 'react';\nimport './Notification.css';\n\nconst Notification = ({ message, status }) => {\n  return (\n    <div className={`${status} notification`}>\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\nconst getAllPersons = () => axios.get(baseUrl).then(resp => resp.data);\nconst deletePerson = (id) => axios.delete(`${baseUrl}/${id}`);\nconst createPerson = (personObject) => axios.post(baseUrl, personObject).then(resp => resp.data);\n\nconst updatePerson = (id, newPerson) => {\n  return axios.put(`${baseUrl}/${id}`, newPerson).then(resp => resp.data)\n};\n\nexport { getAllPersons, createPerson, deletePerson, updatePerson, };\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Notification from './components/Notiifcation';\nimport { getAllPersons, createPerson, deletePerson, updatePerson } from './helpers/personsHelper';\n\nconst App = () => {\n  const hook = () => {\n    getAllPersons()\n      .then(persons => {\n        setPersons(persons)\n      });\n  };\n\n  useEffect(hook, []);\n\n  const [persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ searchTerm, setSearchTerm ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [message, setMessage] = useState({});\n\n  const handlePersonDeletion = ({id, name}) => {\n    deletePerson(id)\n      .then(() => {\n        const peopleList = persons.filter(person => person.id !== id);\n        setPersons(peopleList);\n        notifyUser(`${name} has been deleted from phonebook`, 'success');\n      });\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleSearchTermChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const resetUserInputs = () => {\n    setNewName('');\n    setNewNumber('');\n  };\n\n  const notifyUser = (message, status) => {\n    const newMessage = {message, status};\n    setMessage(newMessage);\n    setTimeout(() => {\n      setMessage({})\n    }, 5000)\n  };\n\n  const filteredContacts =\n    persons.filter(contact => contact.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  const addContact = (event) => {\n    event.preventDefault();\n    const existingPerson = persons.find(person => person.name === newName);\n\n    const message =\n      `${newName} is already added to phonebook, replace the old number with the new one?`;\n\n    if (existingPerson && window.confirm(message)) {\n      const { id } = existingPerson;\n      const newPerson = { ...existingPerson, number: newNumber };\n      updatePerson(id, newPerson)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== id ? person : response));\n          notifyUser(`${newPerson.name} phone number has been modified`, 'success');\n          resetUserInputs();\n        })\n        .catch(() => {\n          notifyUser(\n            `Information from ${newPerson.name} has already been removed from server`,\n            'error'\n          );\n        });\n      return;\n    }\n\n    createPerson({ name: newName, number: newNumber })\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson));\n        notifyUser(`${newPerson.name} has been added to phonebook`, 'success');\n        resetUserInputs();\n      })\n      .catch(error => {\n        console.log(error);\n        notifyUser(error.response.data, 'error');\n        resetUserInputs();\n      });\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      { !!Object.keys(message).length && <Notification message={message.message} status={message.status} /> }\n      <Filter searchTerm={searchTerm} handleSearchTermChange={handleSearchTermChange} />\n      <h3>Add a new</h3>\n      <PersonForm\n        addContact={addContact}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons handlePersonDeletion={handlePersonDeletion} persons={filteredContacts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}